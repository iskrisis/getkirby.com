Title: Kirby in a nutshell

----

Published: 2019-08-18

----

Description: Or what you wish you had known when you started your first Kirby project.

----

Text:

Everyone has their own way of going about things. What works for you, might not work for others. And the things to consider vary for each project, depending on whether you are migrating from another system or whether you are trying to set things up from scratch, whether your project is small or really huge, and so on.

So this recipe is not so much about best practices, it is rather a recap of how Kirby works, what you might want to keep in mind when you start your project with Kirby, what questions you might want to ask yourself and about possible approaches.

## It's all about your project

Kirby is all about giving you the freedom and the tools to create what you want, the way you want–for yourself or your clients. The philosophy is to keep things as simple as possible and to add only what is needed. You can start with a very basic setup and then extend later when new requirements come up.

However, this freedom to create also means that you basically start from scratch and then build your project step by step, a bit like building with Lego™. It means that you need to know the basics like HTML and CSS, and some PHP (or be prepared to learn what you need along the way). While there are some themes out there for Kirby that can get you jump-started (but not thousands of them), you will have to touch code to make changes if these themes don't fit your use case 100%. The idea behind Kirby is to empower you to create your own unique thing, not make your project look the same as thousands of others out there.

## All files and folders

Kirby is a flat-file CMS. That means, your content lives in files and folders, not in a database.

Inside those folders, there are text files with a name and an extension, for example, `projects.txt`.  These file names can be different for each page, or multiple pages can share the same text file name. Each content file name therefore represents a page **type**.

(columns…)
Example content folder structure:


```filesystem
/content/
  /home/
    home.txt
  /projects/
    projects.txt
    /project-a
      project.txt
    /project-b
      project.txt
    /project-c
      project.txt    
  /blog/
    blog.txt
    /article-a
      article.txt
    /article-b
      article.txt  
  /about/
    about.txt
```

++++

Page blueprints for this structure

```filesystem
/site/
  /blueprints/
    /pages/
      about.yml
      article.yml
      blog.yml
      default.yml
      home.yml
      project.yml
      projects.yml
```

(…columns)


Apart from these content folders, there is a second important folder in your installation: the `/site` folder.

## The role of filenames

These file names are important, because the whole Kirby system is based on file names. In fact, there is a strong tie between content and templates.

(screenshot: from-blueprint-to-frontend.png)

If you create a page with a given content file name, this page will be rendered in the frontend with a PHP (glossary: template text: template) of the same name (if it exists, otherwise with the `default.php` template), only with the extension `.php`.

In the same way, if you create a new page in the Panel with a (glossary:blueprint text: blueprint) called `whatever.yml`, the resulting content file name will be `whatever.txt`. Here are some examples:

| Blueprint<br>(`/site/blueprints`) | Text file<br>(`content/...`) | Template <br>(`/site/templates`)| Controller <br>(`/site/controllers`) | Model <br>(`/site/models`)
| ---- | ---- | ---- | ---- | ----
| Defines the form fields for the Panel | Contains the content | Renders the content on frontend | Contains the logic if required | Extends the default page object
| default.yml | default.txt | default.php | default.php | default.php
| projects.yml | projects.txt | projects.php | projects.php | projects.php
| blog.yml | blog.txt | blog.php | blog.php | blog.php


## Structure is not for everyone, but…

Some people always start with a basic content folder structure. Others start with creating the blueprints for the Panel. It doesn't really matter where you start, and you should do what works best for you, but having a basic idea of your final structure helps a lot.

Here are some questions that you might want to ask yourself:

- What are the main pages?
- Which pages are basically only containers for subpages but do not have any content of their own (for example a blog page that shows a list of articles where the articles themselves are subpages)? Should these subpages be accessible via their own URL or only shown on the parent page?
- Which pages are containers for content that comes from other pages (for example a home page with different sections made from different parts of the site)?
- Is a flat structure with a couple of main pages sufficient? Or is it a more complex site that requires a deeply nested tree structure?
- Which page types need what sort of content? Some pages maybe only have a textarea field for long text, others might be a lot more structured with different types of content (glossary: field text: fields).
- Which page types should share the same structure–and hence the same (glossary: blueprint text: blueprint)?
- Are there any fields/tabs/sections that are always the same or appear in multiple areas, so that you can create blueprint "partials" for reuse?
- What sort of global content do you need and where to store it ? (spoiler: in `site.txt`)

The beauty is that all these different structures can be built with Kirby and there is hardly any limitation. You might not be able to answer all the question right from the beginning, but these types of questions can guide you when building the different parts of your site.


<info>
- You do not have to create this structure manually in the file system, you might just as well outline it in your head or on a piece of paper. 

- Also, you can make changes any time (add/delete/restructure your page structure, add/delete fields etc.). But the more detailed your initial plan, the less work you will have with modifying stuff as you go along. If you remove a field from a blueprint, you probably want to (link: docs/cookbook/extensions/content-file-cleanup text: remove it and its value from the content files) as well to get rid of outdated content and you probably have to make changes in templates, snippets or controllers as well.

- If structure is not your thing, just start building…
</info>

## The implications of changing folder names

Folder names (the so-called "slugs") are important as well. Folder names will be part of the URL of a page.

Examples:

| Folder name           | Resulting URL
| ----                  | ----
| `projects`            | `https://yourdomain/projects`
| `about-us`            | `https://yourdomain/about`
| `photography/animals` | `https://yourdomain/photography/animals`

Therefore, if you change the name of the folder (directly in the file system, through the Panel or programmatically), you also change the URL of the page. This doesn't matter so much during development, but it has some implications to be aware of:

- It can affect SEO and usability because of outdated links
- Internal references are by default stored with their ID. That means, if you change the folder name, the reference you stored will no longer be valid.
- The same is true if you use the ID to find a page in your templates, blueprints, controllers etc. with a query like `kirby.page("photography")` or its PHP equivalent.
- If is also not uncommon to use page IDs as class names for styling. If the ID changes, the styles will no longer apply.

There are ways to deal with or prevent such issues, for example:

- To prevent invalid references, you can use custom, unique permanent identifiers that you add manually or you can use a (link: https://github.com/bnomei/kirby3-autoid text: plugin) to create Auto-IDs which are then stored instead of the default ID. This permanent identifier can also be used to query pages.
- Another option would be to prevent deleting or renaming pages, or by using other references like the intended template etc.

## So many fields

(screenshot: panel-form-fields.png)

### Field names
Field names can sometimes lead to confusion. Ok, field names may only be alpha-numeric and contain underscores, that's one thing. But field names can also otherwise be a bit tricky. If, for example, you set up a `files` field like this:

```yaml
fields:
  image:
    type: files
    max: 1
    query: page.images
```

If you now call this field in your template like this…

```php
<?= $page->image()->toFile() ?>
```

…you will probably be surprised not to see the image you selected, because the `image()` method is a native Kirby method and will render the first image in the file system, no matter what you selected in your field. Since there a quite a few Kirby methods, it is easy to accidentally pick such a method as your field name.

There are basically two ways to deal with this:

- Call such fields with the `content()` method: `$page->content()->image()->toFile()`
- Prevent such issues by generally prefixing all your field names: `xy_image` instead of `image`

### Field types, blueprints and templates

Different field types store their content in different ways. While a `text` field stores just a string, a `tags` or `multiselect` field stores a comma separated list of values, and a `pages/files` field or a `structure` field store their content in YAML format. The (link: text: editor) field even stores its content in JSON format. Kirby comes with useful (link: docs/reference/templates/field-methods text: field methods) which convert these different values into something usable in your templates. 

This is all fine as long as you stick with your field types. However, if you decide to make changes to field types in a blueprint during development, or you or your users change templates, you have to be a bit careful.

- Make sure that the templates that a user can change to are compatible regarding the storage value of their content fields
- Keep in mind that content is deleted if the field does not exist in the destination template.


## Sections or fields?

Pages and files can be organized in the Panel using files/pages fields or files/pages sections. It is important to understand the difference between these two types to make informed decisions when to use what.

### Pages section vs. pages field

(screenshot: pages-section-vs-pages-field.png)

#### Pages section

- Shows a list of existing pages with an option to create new pages.
- Pages in a pages section can only have a single parent page which is defined with the `parent` option.
- Pages are filterable by their template + status only.
- A pages section doesn't store anything in the content file.

#### Pages field

- Is basically a select field that allows selecting pages from a given set of pages.
- The selectable pages can be from different parents, the set is defined via the `query` option. If no query is defined, the field options default to the children of the current page.
- The ID(s) of the selected page(s) are stored in the content file.
- Currently there is no option to create new pages from a pages field.
- A typical use case is creating references between pages, e.g. to manually select related pages.

### Files section vs. files field

(screenshot: files-section-vs-files-field.png)

#### Files field

- Select one or more files from a (larger) set of files
- The ID(s) of the selected file(s) are stored in the page’s content file
- Upload a single file at a time, the newly uploaded file is then automatically selected
- Deleting a file uploaded via the files field is only possible via the file view (or through a files section), not directly from the files field
- Templates can be assigned to uploaded files via the upload option
- The files set to select from can be defined using the `query` option; the `query` allows you to fetch files from different parents and to filter the set by any criteria; if no query is set, the field defaults to files of the current page
- You can only upload to a single page; default parent is the current page

#### Files section

- Upload one or more files at once to a single parent
- Files can only be uploaded to a single page; the destination is set with the `parent`option
- Files can be filtered by template only
- You can limit what type of files can be uploaded with the `accept` option in the given files template
- Files are only uploaded to the given parent, the IDs of the uploaded files are not stored anywhere

## The Panel dashboard

The Panel dashboard is the first page users get to see when they access the Panel. In it's most basic form, it provides a sort of sitemap to all or the most important pages of the site and can also contain fields for global information like a top level SEO title and description, the company name and address etc., that is information that is not tied to a particular page.

The form fields and sections for the dashboard are defined in the `/site/blueprints/site.yml` blueprint. The text file for this special "page" (`site.txt`), the `$site` object, lives directly in the content folder and can host media files as well.

## Multi-section pages (type one-pager)

One-pager websites or generally pages that contain different sections (often with repeating types of content) can be realized in multiple ways:

- The sections are created as subpages of the parent page.
- The sections are created using the (link: https://github.com/TimOetting/kirby-builder text: Tim Oetting's Builder plugin).

Both approaches have their pros and cons.

### Using subpages

- Subpages can be as complex as needed and can themselves contain structure fields or subpages if needed.
- Easier to handle if they contain a lot of content.
- The URLs of these subpages are by default made available by the router, so all page sections end up with their own URL and you have to redirect them to the parent manually.
- Without a plugin that allows you to skip the title, every subpage needs a title.

Options to circumvent some disadvantages:

- Store sections in their own sections subfolder.
- Create models for these subpages that rewrite the URL.
- Use a plugin that allows skipping the title when creating a new page.

(add some links here)

### Using the Builder plugin

- All content is created in the same page
- Nested content is possible but can get messy pretty fast
- Easy creation of new blocks
- Better preview of result
- No redirecting involved

(screeshot of builder)

## The media folder

Whenever you upload a file to a page via the Panel, the file is uploaded to the content folder. However, as soon as the URL of the file is called in the browser, the file is moved to the media folder. Also, all thumbnails are created on the fly and stored in the media folder. Therefore, the media folder needs to be publicly accessible within the document root, while you can put the content folder (and most of the other folders) above the document root for better security (see [custom folder setup](/docs/guide/configuration#custom-folder-setup)).

While this setup needs more space on the server, it has (link: text: several advantages).

## Multilanguage

...

<info>
Never ever change the default language if content is already in place. the swap in the defaults will leave you with a huge number of unfilled fields.
</info>

## Performance considerations

The file system is really powerful and fast and creating web projects with thousands or ten thousands of pages is no usally no problem. However, these thousand of pages shouldn't all reside in the same parent but rather be distributed in a tree-like structure. There is no hard limit as to how many folders should be in a single parent as this also depends on the performance of the server and the number and size of media files.

Beyond a certain size, try to avoid calling the `$site->index()` method because it reads the entire folder structure including all files which can result in big performance issues.

Also, use (link: docs/guide/cache text: caching) wherever possible to improve performance.

## Going beyond with virtual pages

At it's heart, Kirby is file-based CMS, we already said that somewhere at the beginning of this long winding article, right? But Kirby wouldn't be Kirby if that was the limit. Where file-based storage is too limiting, add a database. If you want to integrate content from other sources like an API, a feed, a spreadsheet–go ahead.

All (link: docs/guide/virtual-pages text: virtual pages) are seamlessly integrated in Kirby. Routing works out of the box, they are included in API requests and they are even manageable in the panel!

Get started! Any questions? Visit our (link: forum.getkirby.com text: forum) and ask us anything.



